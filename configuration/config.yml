- hosts: cerebrito
  become: true
  tasks:
    - name: Allow all sudo users without password
      ansible.builtin.template:
        dest: /etc/sudoers.d
        src: files/cerebrito/001-nopass
        validate: 'visudo -cf %s'
    - name: Create configuration directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "u=rwx,g=rwx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "/opt/cerebrito"
        - "/opt/cerebrito/config"
    - name: Install some basic packages
      package:
        state: present
        name: "{{ item }}"
      tags:
        - basic-packages
      with_items:
        - htop
        - tree
        - vim
        - iotop
- hosts: cerebrito
  vars:
    pip_install_packages:
      - name: docker
      - name: docker-compose
  become: true
  tags:
    - docker
  roles:
    - geerlingguy.pip
    - geerlingguy.docker
# - hosts: cerebrito
#   become: true
#   tags:
#     - tailscale
#   roles:
#     - artis3n.tailscale
- hosts: cerebrito
  become: true
  tags:
    - storage
  tasks:
    - ansible.builtin.set_fact:
        external_disk_available: false
    - ansible.builtin.debug:
        var: ansible_device_links.uuids
    - name: "Check if device is available"
      ansible.builtin.set_fact:
        external_disk_available: true
      when: item.value[0] == usb_uuid
      with_dict: "{{ ansible_device_links.uuids }}"
    - name: "Mount fs"
      ansible.posix.mount:
        path: /media/usb
        src: "UUID={{ usb_uuid }}"
        fstype: ntfs-3g
        state: present

- hosts: cerebrito
  become: true
  tags:
    - network
  tasks:
    - name: Copy netplan configuration files.
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/etc/netplan/"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
        mode: "u=rw,g=r,o=r"
      with_fileglob:
        - "files/cerebrito/netplan/*"
    - name: Copy eth0 link file
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/etc/systemd/network/"
        owner: "root"
        group: "root"
        mode: "u=rw,g=r,o=r"
      loop:
        - "files/cerebrito/10-eth0.link"
- hosts: cerebrito
  tags:
    - mqtt
    - services
  tasks:
    - name: Create configuration directories for mqtt
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "{{ base_directory }}/mqtt"
    - name: Copy configuration files
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ base_directory }}/mqtt/"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
        mode: "u=rw,g=r,o=r"
      with_fileglob:
        - "files/mqtt/*"
      register: mqtt_config
    - name: Create configuration directories for mqtt
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "{{ base_directory }}/mqtt/data"
        - "{{ base_directory }}/mqtt/log"

- hosts: cerebrito
  tags:
    - transmission
    - services
  become: true
  tasks:
    - name: Create storage directory for transmissions
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "/data"
        - "/data/downloads-incomplete"
    - name: Copy configuration files for transmission
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ base_directory }}/transmission"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
        mode: "u=rw,g=r,o=r"
      with_fileglob:
        - "files/transmission/*"
      register: "transmission_config"

- hosts: cerebrito
  tags:
    - servarr
    - services
  become: true
  tasks:
    - name: Create configuration directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "{{ base_directory }}/arr/"
        - "{{ base_directory }}/arr/sonarr"
        - "{{ base_directory }}/arr/radarr"
        - "{{ base_directory }}/arr/readarr"
        - "{{ base_directory }}/arr/prowlarr"
        - "{{ base_directory }}/arr/radarr"
        - "{{ base_directory }}/arr/jackett"
        - "{{ base_directory }}/jellyfin"
        - "/data"
        - "/data/jellyfin_cache"
        - "/data/movies"
        - "/data/shows"
        - "/data/books"
        - "/data/tv"

- hosts: cerebrito
  tags:
    - homeassistant
    - hass
    - services
  tasks:
    - name: Create configuration directories for homeassistant
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "{{ base_directory }}/homeassistant/config"
    - name: Copy configuration files for homeassistant
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ base_directory }}/homeassistant/config"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
        mode: "u=rw,g=r,o=r"
      with_fileglob:
        - "files/homeassistant/*"
      register: "ha_config"
- hosts: cerebrito
  tags:
    - nodered
    - services
  tasks:
    - name: Create configuration directories for nodered
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "{{ base_directory }}/nodered"
- hosts: cerebrito
  tags:
    - pihole
    - services
  tasks:
    - name: Create configuration directories for pihole
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "{{ base_directory }}/pihole"
        - "{{ base_directory }}/pihole/etc"
        - "{{ base_directory }}/pihole/dnsmasq.d"
    - name: Create dnsmasq configuration for wildcard
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ base_directory }}/pihole/dnsmasq.d/"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
        mode: "u=rw,g=r,o=r"
      loop: "{{ lookup('ansible.builtin.fileglob', 'files/pihole/dnsmasq.d/*', wantlist=True )}}"
- hosts: cerebrito
  tags:
    - ssl
    - traefik
    - services
  tasks:
    - name: Create directories for traefik
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "{{ base_directory }}/traefik/certs"
        - "{{ base_directory }}/traefik/logs"
- hosts: cerebrito
  tags:
    - ssl
    - traefik
    - services
  tasks:
    - name: Copy traefik configuration to remote
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ base_directory }}/traefik/"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
        mode: "u=rw,g=r,o=r"
      loop: "{{ lookup('ansible.builtin.fileglob', 'files/traefik/*', wantlist=True )}}"
- hosts: cerebrito
  tags:
    - wireguard
  tasks:
    - name: Create directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "{{ base_directory }}/wireguard"
    - name: "Copy wireguard configuration to remote"
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ base_directory }}/wireguard/"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
        mode: "u=r,g=,o="
      loop: "{{ lookup('ansible.builtin.fileglob', 'files/wireguard/*', wantlist=True )}}"

- hosts: cerebrito
  tags:
    - docker-compose
    - services
  tasks:
    - name: Get infos on main network
      community.docker.docker_network_info:
        name: cerebrito_main
      register: result
    - name: "get info on WG network"
      community.docker.docker_network_info:
        name: wgnet
      register: wg_network
    - name: "Create a WG network with custom IPAM config"
      community.docker.docker_network:
        name: wgnet
        ipam_config:
          - subnet: 172.20.0.0/24
      when: wg_network.exists == false
    - name: Create a network with custom IPAM config
      community.docker.docker_network:
        name: main
        ipam_config:
          - subnet: 172.200.0.0/16
        ipam_driver_options:
          com.docker.network.bridge.name: hass
      when: result.exists == false
    - name: Create docker-compose directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: "directory"
        mode: "u=rwx,g=rx,o=rx"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
      with_items:
        - "{{ base_directory }}/docker-compose"
    - name: "Copy docker-compose files"
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ base_directory }}/docker-compose/{{ item | basename | regex_replace('\\.j2$', '') }}"
        owner: "{{ server_user }}"
        group: "{{ server_user }}"
        mode: "u=rw,g=r,o=r"
      with_fileglob:
        - "files/docker-compose/*"
      register: compose_files
    - name: "Fire up docker-compose"
      community.docker.docker_compose:
        project_src: "{{ base_directory }}"
        files: "{{ compose_files.results | map(attribute='dest') }}"
        pull: true
        restarted: "true"
        state: "present"
        remove_orphans: true
